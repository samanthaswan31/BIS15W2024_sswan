dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
mutate(academic_yr = as.factor(academic_yr)) %>%
ggplot(aes(x = academic_yr, y = filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
mutate(academic_yr = as.factor(academic_yr)) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(academic_yr==input$x & campus==input$y & category == input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
UC_admit <- read_csv("data/UC_admit.csv")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, filtered_count_fr), y=FilteredCountFR)) +
geom_col(color="black", fill="papayawhip", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==Davis & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="papayawhip", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus=="Davis" & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="papayawhip", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Davis Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="papayawhip", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit %>%
group_by(Ethnicity) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR, fill=Ethnicity))+
geom_col()+
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(dplyr)
blood_count <- read_csv("data/blood_count.csv")
blood_count <- read_csv("data/blood_count_dataset.csv")
glimpse(blood_count)
blood_count %>%
group_by(gender) %>%
summarize(min=min(red_blood_cells)
mean=mean(red_blood_cells),
blood_count %>%
group_by(gender) %>%
summarize(min=min(red_blood_cells),
mean=mean(red_blood_cells),
max=max(red_blood_cells))
View(blood_count)
blood_count %>%
group_by(Gender) %>%
summarize(min=min(red_blood_cells),
mean=mean(red_blood_cells),
max=max(red_blood_cells))
blood_count %>%
group_by(Red_Blood_Cells) %>%
summarize(min=min(Red_Blood_Cells),
mean=mean(Red_Blood_Cells),
max=max(Red_Blood_Cells))
options(scipen = 999, digits = 2)
blood_count %>%
filter(Gender == "male") %>%
select(3:9) %>%
colMeans(na.rm = TRUE)
bloood_count %>%
filter(Gender == "Female") />%
bloood_count %>%
filter(Gender == "Female") %>%
select(3:9) %>%
summarise_all(mean, na.rm = T)
blood_count %>%
filter(Gender == "Female") %>%
select(3:9) %>%
summarise_all(mean, na.rm = T)
blood_count %>%
pivot_wider(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender))+
geom_boxplot()+
facet_wrap(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
filter(Gender == "Female") %>% #filters for females
select(3:9) %>% #selects for columns 3-9
summarise_all(mean, na.rm = T) #calculates the mean
options(scipen = 999, digits = 2)
blood_count %>%
filter(Gender == "male") %>% #filters for males
select(3:9) %>% #selects column 3-9
colMeans(na.rm = TRUE) #gives the column means
blood_count %>%
pivot_wider(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender))+
geom_boxplot()+
facet_wrap(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(names_from = "Test", values_from = 3:9) %>%
pivot_longer(cols = -Gender, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender))+
geom_boxplot()+
facet_wrap(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(names_from = "Test", values_from = 3:9) %>%
pivot_longer(cols = -Gender, names_to = "Test", values_to = "Values") %>%
geom_boxplot()+
facet_wrap(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(names_from = "Test", values_from = 3:9) %>%
pivot_longer(cols = -Gender, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Test, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_longer(cols = -Gender, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Test, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ name, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_longer(cols = -Gender, values_to = "Values") %>%
group_by(Test) %>%
ggplot(aes(x = Test, y = Values, fill = Gender)) +
geom_boxplot() +
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender))+
geom_boxplot()+
facet_wrap(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
grouped_bc <- blood_count %>%
change(Age_Group = case_when(
Age >= 20 & Age <= 29 ~ "20s",
Age >= 30 & Age <= 39 ~ "30s",
Age >= 40 & Age <= 49 ~ "40s",
Age >= 50 & Age <= 59 ~ "50s",
Age >= 60 & Age <= 70 ~ "60s")) # there were only 4 people in 70s, so I combined it with 60s
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender))+
geom_boxplot()+
facet_wrap(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
grouped_bc <- blood_count %>%
mutate(Age_Group = case_when( #replaced with mutate
Age >= 20 & Age <= 29 ~ "20s",
Age >= 30 & Age <= 39 ~ "30s",
Age >= 40 & Age <= 49 ~ "40s",
Age >= 50 & Age <= 59 ~ "50s",
Age >= 60 & Age <= 70 ~ "60s")) # there were only 4 people in 70s, so I combined it with 60s
head(grouped_bc)
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(ase(x = Age_Group, y = values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap( Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = values, fill = Age_Group)) + #typo
geom_boxplot() +
facet_wrap( Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = Values, fill = Age_Group)) + #typo
geom_boxplot() +
facet_wrap( Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = Values, fill = Age_Group)) + #typo
geom_boxplot() +
facet_wrap(~Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
grouped_bc %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = Values, fill = Age_Group)) + #typo
geom_boxplot() +
facet_wrap(~Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
