server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
reactive({input$x #refers to the variable x/y, variables must match
input$y})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px") #providing the size/aspect of the visual
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = penguins, aes_string(x=input$x, y=input$y, color="species"))+ #input comes from the UI above
geom_point()+
theme_light(base_size = 18)
}) #closes renderPlot
} #closes server function
shinyApp(ui, server)
View(UC_admit)
UC_admit %>%
group_by(ethnicity) %>%
ggplot(aes(x=ethnicity, y=perc_fr))+
geom_col()
UC_admit %>%
group_by(ethnicity) %>%
ggplot(aes(x=ethnicity, y=perc_fr), fill=ethnicity)+
geom_col()
UC_admit %>%
group_by(ethnicity) %>%
ggplot(aes(x=ethnicity, y=perc_fr), color=ethnicity)+
geom_col()
UC_admit %>%
group_by(ethnicity) %>%
ggplot(aes(x=ethnicity, y=perc_fr, fill=ethnicity))+
geom_col()
UC_admit %>%
group_by(ethnicity) %>%
ggplot(aes(x=ethnicity, y=perc_fr, fill=ethnicity))+
geom_col()+
coord_flip()
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
mutate(academic_yr = as.factor(academic_yr)) %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
mutate(academic_yr = as.factor(academic_yr)) %>%
ggplot(aes(x = academic_yr, y = filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
mutate(academic_yr = as.factor(academic_yr)) %>%
ggplot(aes(x = academic_yr, y = filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
mutate(academic_yr = as.factor(academic_yr)) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category == input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity in the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Plot Options", width =3,
radioButtons("x", "Pick Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Pick University", choices = c("Davis", "Irvine", "Berkeley", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbera", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Pick Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), #close first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)#close the second box
)#close the row
)#close the dashboard body
)#close the UI
server <- function(input, output, session) {renderPlot({
UC_admit %>%
filter(academic_yr==input$x & campus==input$y & category == input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr))+
geom_col(color="black", fill="papayawhip", alpha = 0.75)+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
}) #closes the renderplot
session$onSessionEnded(stopApp)
} #closes the server
shinyApp(ui, server)
UC_admit <- read_csv("data/UC_admit.csv")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, filtered_count_fr), y=FilteredCountFR)) +
geom_col(color="black", fill="papayawhip", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==Davis & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="papayawhip", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus=="Davis" & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="papayawhip", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Davis Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="papayawhip", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit %>%
group_by(Ethnicity) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR, fill=Ethnicity))+
geom_col()+
coord_flip()
